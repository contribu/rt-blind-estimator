!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BUNZIP2	svdutil.c	44;"	d	file:
BZIP2	svdutil.c	45;"	d	file:
CC	Makefile	/^  CC = cc -pipe -O3 -Wall -fno-common -arch ppc$/;"	m
CC	Makefile	/^CC = gcc -Wall -O4$/;"	m
COMPRESS	svdutil.c	48;"	d	file:
DMat	Manual/svdlib.h	/^typedef struct dmat *DMat;$/;"	t	typeref:struct:dmat
DMat	svdlib.h	/^typedef struct dmat *DMat;$/;"	t	typeref:struct:dmat
FALSE	Manual/svdlib.h	36;"	d
FALSE	svdlib.h	36;"	d
HOSTTYPE	Makefile	/^  HOSTTYPE=bin$/;"	m
LAS2	main.c	/^enum algorithms{LAS2};$/;"	e	enum:algorithms	file:
LIBS	Makefile	/^LIBS=-lm$/;"	m
LMTNW	las2.c	43;"	d	file:
LanStore	las2.c	/^double **LanStore, *OPBTemp;$/;"	v
MAXLL	las2.c	41;"	d	file:
MAX_FILENAME	svdutil.c	50;"	d	file:
MAX_PIPES	svdutil.c	51;"	d	file:
OBJ	Makefile	/^OBJ=svdlib.o svdutil.o las2.o$/;"	m
OPBTemp	las2.c	/^double **LanStore, *OPBTemp;$/;"	v
Pipe	svdutil.c	/^static FILE *Pipe[MAX_PIPES];$/;"	v	file:
RETRP	las2.c	/^enum storeVals {STORQ = 1, RETRQ, STORP, RETRP};$/;"	e	enum:storeVals	file:
RETRQ	las2.c	/^enum storeVals {STORQ = 1, RETRQ, STORP, RETRP};$/;"	e	enum:storeVals	file:
S	Manual/svdlib.h	/^  double *S;  \/* Array of singular values. (length d) *\/$/;"	m	struct:svdrec
S	svdlib.h	/^  double *S;  \/* Array of singular values. (length d) *\/$/;"	m	struct:svdrec
SAFE_FREE	svdutil.h	37;"	d
SMat	Manual/svdlib.h	/^typedef struct smat *SMat;$/;"	t	typeref:struct:smat
SMat	svdlib.h	/^typedef struct smat *SMat;$/;"	t	typeref:struct:smat
STORP	las2.c	/^enum storeVals {STORQ = 1, RETRQ, STORP, RETRP};$/;"	e	enum:storeVals	file:
STORQ	las2.c	/^enum storeVals {STORQ = 1, RETRQ, STORP, RETRP};$/;"	e	enum:storeVals	file:
SVDCount	svdlib.c	/^long SVDCount[SVD_COUNTERS];$/;"	v
SVDLIB_H	Manual/svdlib.h	33;"	d
SVDLIB_H	svdlib.h	33;"	d
SVDRec	Manual/svdlib.h	/^typedef struct svdrec *SVDRec;$/;"	t	typeref:struct:svdrec
SVDRec	svdlib.h	/^typedef struct svdrec *SVDRec;$/;"	t	typeref:struct:svdrec
SVDUTIL_H	svdutil.h	33;"	d
SVDVerbosity	svdlib.c	/^long SVDVerbosity = 1;$/;"	v
SVDVersion	svdlib.c	/^char *SVDVersion = "1.4";$/;"	v
SVD_COUNTERS	Manual/svdlib.h	/^enum svdCounters {SVD_MXV, SVD_COUNTERS};$/;"	e	enum:svdCounters
SVD_COUNTERS	svdlib.h	/^enum svdCounters {SVD_MXV, SVD_COUNTERS};$/;"	e	enum:svdCounters
SVD_F_DB	Manual/svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_F_DB	svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_F_DT	Manual/svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_F_DT	svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_F_SB	Manual/svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_F_SB	svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_F_ST	Manual/svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_F_ST	svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_F_STH	Manual/svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_F_STH	svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	e	enum:svdFileFormats
SVD_IS_SPARSE	Manual/svdlib.h	98;"	d
SVD_IS_SPARSE	svdlib.h	98;"	d
SVD_MXV	Manual/svdlib.h	/^enum svdCounters {SVD_MXV, SVD_COUNTERS};$/;"	e	enum:svdCounters
SVD_MXV	svdlib.h	/^enum svdCounters {SVD_MXV, SVD_COUNTERS};$/;"	e	enum:svdCounters
TRUE	Manual/svdlib.h	39;"	d
TRUE	svdlib.h	39;"	d
UNZIP	svdutil.c	46;"	d	file:
Ut	Manual/svdlib.h	/^  DMat Ut;    \/* Transpose of left singular vectors. (d by m)$/;"	m	struct:svdrec
Ut	svdlib.h	/^  DMat Ut;    \/* Transpose of left singular vectors. (d by m)$/;"	m	struct:svdrec
Vt	Manual/svdlib.h	/^  DMat Vt;    \/* Transpose of right singular vectors. (d by n)$/;"	m	struct:svdrec
Vt	svdlib.h	/^  DMat Vt;    \/* Transpose of right singular vectors. (d by n)$/;"	m	struct:svdrec
ZIP	svdutil.c	47;"	d	file:
algorithms	main.c	/^enum algorithms{LAS2};$/;"	g	file:
check_parameters	las2.c	/^long check_parameters(SMat A, long dimensions, long iterations, $/;"	f
cols	Manual/svdlib.h	/^  long cols;$/;"	m	struct:dmat
cols	Manual/svdlib.h	/^  long cols;$/;"	m	struct:smat
cols	svdlib.h	/^  long cols;$/;"	m	struct:dmat
cols	svdlib.h	/^  long cols;$/;"	m	struct:smat
d	Manual/svdlib.h	/^  int d;      \/* Dimensionality (rank) *\/$/;"	m	struct:svdrec
d	svdlib.h	/^  int d;      \/* Dimensionality (rank) *\/$/;"	m	struct:svdrec
debug	main.c	/^static void debug(char *fmt, ...) {$/;"	f	file:
dmat	Manual/svdlib.h	/^struct dmat {$/;"	s
dmat	svdlib.h	/^struct dmat {$/;"	s
eps	las2.c	/^double eps, eps1, reps, eps34;$/;"	v
eps1	las2.c	/^double eps, eps1, reps, eps34;$/;"	v
eps34	las2.c	/^double eps, eps1, reps, eps34;$/;"	v
error_bound	las2.c	/^long error_bound(long *enough, double endl, double endr, $/;"	f
error_msg	las2.c	/^static char *error_msg[] = {  \/* error messages used by function    *$/;"	v	file:
fatalError	main.c	/^static void fatalError(char *fmt, ...) {$/;"	f	file:
formats	Manual/index.html	/^<a name="formats">$/;"	a
ierr	las2.c	/^long ierr;$/;"	v
imin	main.c	/^static long imin(long a, long b) {return (a < b) ? a : b;}$/;"	f	file:
imtql2	las2.c	/^void imtql2(long nm, long n, double d[], double e[], double z[])$/;"	f
imtqlb	las2.c	/^void imtqlb(long n, double d[], double e[], double bnd[])$/;"	f
isPipe	svdutil.c	/^static char isPipe(FILE *p) {$/;"	f	file:
lanczos_step	las2.c	/^long lanczos_step(SMat A, long first, long last, double *wptr[],$/;"	f
lanso	las2.c	/^int lanso(SMat A, long iterations, long dimensions, double endl,$/;"	f
machar	las2.c	/^void machar(long *ibeta, long *it, long *irnd, long *machep, long *negep) {$/;"	f
main	main.c	/^int main(int argc, char *argv[]) {$/;"	f
numPipes	svdutil.c	/^static int numPipes = 0;$/;"	v	file:
openPipe	svdutil.c	/^static FILE *openPipe(char *pipeName, char *mode) {$/;"	f	file:
ortbnd	las2.c	/^void ortbnd(double *alf, double *eta, double *oldeta, double *bet, long step,$/;"	f
pointr	Manual/svdlib.h	/^  long *pointr;  \/* For each col (plus 1), index of first non-zero entry. *\/$/;"	m	struct:smat
pointr	svdlib.h	/^  long *pointr;  \/* For each col (plus 1), index of first non-zero entry. *\/$/;"	m	struct:smat
printUsage	main.c	/^void printUsage(char *progname) {$/;"	f
purge	las2.c	/^void purge(long n, long ll, double *r, double *q, double *ra,  $/;"	f
readZippedFile	svdutil.c	/^static FILE *readZippedFile(char *command, char *fileName) {$/;"	f	file:
registerPipe	svdutil.c	/^static void registerPipe(FILE *p) {$/;"	f	file:
reps	las2.c	/^double eps, eps1, reps, eps34;$/;"	v
ritvec	las2.c	/^long ritvec(long n, SMat A, SVDRec R, double kappa, double *ritz, double *bnd, $/;"	f
rotateArray	las2.c	/^void rotateArray(double *a, int size, int x) {$/;"	f
rowind	Manual/svdlib.h	/^  long *rowind;  \/* For each nz entry, the row index. *\/$/;"	m	struct:smat
rowind	svdlib.h	/^  long *rowind;  \/* For each nz entry, the row index. *\/$/;"	m	struct:smat
rows	Manual/svdlib.h	/^  long rows;$/;"	m	struct:dmat
rows	Manual/svdlib.h	/^  long rows;$/;"	m	struct:smat
rows	svdlib.h	/^  long rows;$/;"	m	struct:dmat
rows	svdlib.h	/^  long rows;$/;"	m	struct:smat
smat	Manual/svdlib.h	/^struct smat {$/;"	s
smat	svdlib.h	/^struct smat {$/;"	s
startv	las2.c	/^double startv(SMat A, double *wptr[], long step, long n) {$/;"	f
store	las2.c	/^void store(long n, long isw, long j, double *s) {$/;"	f
storeVals	las2.c	/^enum storeVals {STORQ = 1, RETRQ, STORP, RETRP};$/;"	g	file:
stpone	las2.c	/^void stpone(SMat A, double *wrkptr[], double *rnmp, double *tolp, long n) {$/;"	f
stringEndsIn	svdutil.c	/^static int stringEndsIn(char *s, char *t) {$/;"	f	file:
svdConvertDtoS	svdlib.c	/^SMat svdConvertDtoS(DMat D) {$/;"	f
svdConvertStoD	svdlib.c	/^DMat svdConvertStoD(SMat S) {$/;"	f
svdCounters	Manual/svdlib.h	/^enum svdCounters {SVD_MXV, SVD_COUNTERS};$/;"	g
svdCounters	svdlib.h	/^enum svdCounters {SVD_MXV, SVD_COUNTERS};$/;"	g
svdFileFormats	Manual/svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	g
svdFileFormats	svdlib.h	/^enum svdFileFormats {SVD_F_STH, SVD_F_ST, SVD_F_SB, SVD_F_DT, SVD_F_DB};$/;"	g
svdFreeDMat	svdlib.c	/^void svdFreeDMat(DMat D) {$/;"	f
svdFreeSMat	svdlib.c	/^void svdFreeSMat(SMat S) {$/;"	f
svdFreeSVDRec	svdlib.c	/^void svdFreeSVDRec(SVDRec R) {$/;"	f
svdLAS2	las2.c	/^SVDRec svdLAS2(SMat A, long dimensions, long iterations, double end[2], $/;"	f
svdLAS2A	las2.c	/^SVDRec svdLAS2A(SMat A, long dimensions) {$/;"	f
svdLoadDenseArray	svdlib.c	/^double *svdLoadDenseArray(char *filename, int *np, char binary) {$/;"	f
svdLoadDenseBinaryFile	svdlib.c	/^static DMat svdLoadDenseBinaryFile(FILE *file) {$/;"	f	file:
svdLoadDenseMatrix	svdlib.c	/^DMat svdLoadDenseMatrix(char *filename, int format) {$/;"	f
svdLoadDenseTextFile	svdlib.c	/^static DMat svdLoadDenseTextFile(FILE *file) {$/;"	f	file:
svdLoadSparseBinaryFile	svdlib.c	/^static SMat svdLoadSparseBinaryFile(FILE *file) {$/;"	f	file:
svdLoadSparseMatrix	svdlib.c	/^SMat svdLoadSparseMatrix(char *filename, int format) {$/;"	f
svdLoadSparseTextFile	svdlib.c	/^static SMat svdLoadSparseTextFile(FILE *file) {$/;"	f	file:
svdLoadSparseTextHBFile	svdlib.c	/^static SMat svdLoadSparseTextHBFile(FILE *file) {$/;"	f	file:
svdNewDMat	svdlib.c	/^DMat svdNewDMat(int rows, int cols) {$/;"	f
svdNewSMat	svdlib.c	/^SMat svdNewSMat(int rows, int cols, int vals) {$/;"	f
svdNewSVDRec	svdlib.c	/^SVDRec svdNewSVDRec(void) {$/;"	f
svdResetCounters	svdlib.c	/^void svdResetCounters(void) {$/;"	f
svdTransposeD	svdlib.c	/^DMat svdTransposeD(DMat D) {$/;"	f
svdTransposeS	svdlib.c	/^SMat svdTransposeS(SMat S) {$/;"	f
svdWriteDenseArray	svdlib.c	/^void svdWriteDenseArray(double *a, int n, char *filename, char binary) {$/;"	f
svdWriteDenseBinaryFile	svdlib.c	/^static void svdWriteDenseBinaryFile(DMat D, FILE *file) {$/;"	f	file:
svdWriteDenseMatrix	svdlib.c	/^void svdWriteDenseMatrix(DMat D, char *filename, int format) {$/;"	f
svdWriteDenseTextFile	svdlib.c	/^static void svdWriteDenseTextFile(DMat D, FILE *file) {$/;"	f	file:
svdWriteSparseBinaryFile	svdlib.c	/^static void svdWriteSparseBinaryFile(SMat S, FILE *file) {$/;"	f	file:
svdWriteSparseMatrix	svdlib.c	/^void svdWriteSparseMatrix(SMat S, char *filename, int format) {$/;"	f
svdWriteSparseTextFile	svdlib.c	/^static void svdWriteSparseTextFile(SMat S, FILE *file) {$/;"	f	file:
svdWriteSparseTextHBFile	svdlib.c	/^static void svdWriteSparseTextHBFile(SMat S, FILE *file) {$/;"	f	file:
svd_beep	svdutil.c	/^void svd_beep(void) {$/;"	f
svd_closeFile	svdutil.c	/^void svd_closeFile(FILE *file) {$/;"	f
svd_datx	svdutil.c	/^void svd_datx(long n, double da, double *dx, long incx, double *dy, long incy) {$/;"	f
svd_daxpy	svdutil.c	/^void svd_daxpy (long n, double da, double *dx, long incx, double *dy, long incy) {$/;"	f
svd_dcopy	svdutil.c	/^void svd_dcopy(long n, double *dx, long incx, double *dy, long incy) {$/;"	f
svd_ddot	svdutil.c	/^double svd_ddot(long n, double *dx, long incx, double *dy, long incy) {$/;"	f
svd_debug	svdutil.c	/^void svd_debug(char *fmt, ...) {$/;"	f
svd_dmax	svdutil.c	/^double svd_dmax(double a, double b) {$/;"	f
svd_dmin	svdutil.c	/^double svd_dmin(double a, double b) {$/;"	f
svd_doubleArray	svdutil.c	/^double *svd_doubleArray(long size, char empty, char *name) {$/;"	f
svd_dscal	svdutil.c	/^void svd_dscal(long n, double da, double *dx, long incx) {$/;"	f
svd_dsort2	svdutil.c	/^void svd_dsort2(long igap, long n, double *array1, double *array2) {$/;"	f
svd_dswap	svdutil.c	/^void svd_dswap(long n, double *dx, long incx, double *dy, long incy) {$/;"	f
svd_error	svdutil.c	/^void svd_error(char *fmt, ...) {$/;"	f
svd_fatalError	svdutil.c	/^void svd_fatalError(char *fmt, ...) {$/;"	f
svd_fatalReadFile	svdutil.c	/^FILE *svd_fatalReadFile(char *filename) {$/;"	f
svd_fsign	svdutil.c	/^double svd_fsign(double a, double b) {$/;"	f
svd_idamax	svdutil.c	/^long svd_idamax(long n, double *dx, long incx) {$/;"	f
svd_imax	svdutil.c	/^long svd_imax(long a, long b) {$/;"	f
svd_imin	svdutil.c	/^long svd_imin(long a, long b) {$/;"	f
svd_longArray	svdutil.c	/^long *svd_longArray(long size, char empty, char *name) {$/;"	f
svd_opa	svdutil.c	/^void svd_opa(SMat A, double *x, double *y) {$/;"	f
svd_opb	svdutil.c	/^void svd_opb(SMat A, double *x, double *y, double *temp) {$/;"	f
svd_pythag	svdutil.c	/^double svd_pythag(double a, double b) {$/;"	f
svd_random2	svdutil.c	/^double svd_random2(long *iy) {$/;"	f
svd_readBinFloat	svdutil.c	/^char svd_readBinFloat(FILE *file, float *val) {$/;"	f
svd_readBinInt	svdutil.c	/^char svd_readBinInt(FILE *file, int *val) {$/;"	f
svd_readFile	svdutil.c	/^FILE *svd_readFile(char *fileName) {$/;"	f
svd_writeBinFloat	svdutil.c	/^char svd_writeBinFloat(FILE *file, float r) {$/;"	f
svd_writeBinInt	svdutil.c	/^char svd_writeBinInt(FILE *file, int x) {$/;"	f
svd_writeFile	svdutil.c	/^FILE *svd_writeFile(char *fileName, char append) {$/;"	f
svdrec	Manual/svdlib.h	/^struct svdrec {$/;"	s
svdrec	svdlib.h	/^struct svdrec {$/;"	s
timer	main.c	/^float timer(void) {$/;"	f
vals	Manual/svdlib.h	/^  long vals;     \/* Total non-zero entries. *\/$/;"	m	struct:smat
vals	svdlib.h	/^  long vals;     \/* Total non-zero entries. *\/$/;"	m	struct:smat
value	Manual/svdlib.h	/^  double **value; \/* Accessed by [row][col]. Free value[0] and value to free.*\/$/;"	m	struct:dmat
value	Manual/svdlib.h	/^  double *value; \/* For each nz entry, the value. *\/$/;"	m	struct:smat
value	svdlib.h	/^  double **value; \/* Accessed by [row][col]. Free value[0] and value to free.*\/$/;"	m	struct:dmat
value	svdlib.h	/^  double *value; \/* For each nz entry, the value. *\/$/;"	m	struct:smat
writeZippedFile	svdutil.c	/^static FILE *writeZippedFile(char *fileName, char append) {$/;"	f	file:
write_header	las2.c	/^void write_header(long iterations, long dimensions, double endl, double endr, $/;"	f
